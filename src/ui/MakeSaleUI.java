package ui;


import db.DatabaseConnection;
import util.UIHelper;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * UI for making a sale in the coffee shop.
 * <p>
 * Allows selection of product and quantity, checks stock, records sale, and updates inventory.
 * </p>
 * @author Auto-generated by GitHub Copilot
 */
public class MakeSaleUI {
    /**
     * Launches the Make Sale UI window.
     * @param args Command-line arguments (not used)
     */
    public static void main(String[] args) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Make a Sale");
            frame.setSize(800, 500);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.getContentPane().setBackground(new java.awt.Color(245, 247, 250));
            frame.setLayout(new java.awt.GridBagLayout());
            java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
            gbc.insets = new java.awt.Insets(14, 18, 14, 18);
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;


            // Section Header
            JLabel header = new JLabel("Make a Sale", JLabel.CENTER);
            header.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 20));
            header.setForeground(new java.awt.Color(40, 53, 88));
            gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 4;
            frame.add(header, gbc);

            // Customer Info
            JLabel nameLabel = new JLabel("Customer Name:");
            nameLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            gbc.gridx = 0; gbc.gridy = 1; gbc.gridwidth = 1;
            frame.add(nameLabel, gbc);
            JTextField nameField = new JTextField();
            nameField.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            nameField.setToolTipText("Enter customer name (optional)");
            gbc.gridx = 1; gbc.gridy = 1;
            frame.add(nameField, gbc);

            JLabel numberLabel = new JLabel("Customer Number:");
            numberLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            gbc.gridx = 2; gbc.gridy = 1;
            frame.add(numberLabel, gbc);
            JTextField numberField = new JTextField();
            numberField.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            numberField.setToolTipText("Enter customer phone number (optional)");
            gbc.gridx = 3; gbc.gridy = 1;
            frame.add(numberField, gbc);

            gbc.gridwidth = 1;
            JLabel productLabel = new JLabel("Select Product:");
            productLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            productLabel.setToolTipText("Choose a product to sell.");
            gbc.gridx = 0; gbc.gridy = 2;
            frame.add(productLabel, gbc);
            JComboBox<String> productBox = new JComboBox<>();
            productBox.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            productBox.setToolTipText("Select the product to sell.");
            gbc.gridx = 1; gbc.gridy = 2;
            frame.add(productBox, gbc);
            UIHelper.updateProductCombo(productBox);

            JLabel qtyLabel = new JLabel("Quantity:");
            qtyLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            qtyLabel.setToolTipText("Enter the quantity to sell.");
            gbc.gridx = 2; gbc.gridy = 2;
            frame.add(qtyLabel, gbc);
            JTextField qtyField = new JTextField();
            qtyField.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            qtyField.setToolTipText("Type the quantity to sell (must be positive integer).");
            gbc.gridx = 3; gbc.gridy = 2;
            frame.add(qtyField, gbc);

            // Cart Table
            String[] cartColumns = {"Product", "Quantity"};
            DefaultTableModel cartModel = new DefaultTableModel(cartColumns, 0);
            JTable cartTable = new JTable(cartModel);
            cartTable.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            cartTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));
            cartTable.setRowHeight(24);
            JScrollPane cartScroll = new JScrollPane(cartTable);
            gbc.gridx = 0; gbc.gridy = 2; gbc.gridwidth = 4; gbc.fill = java.awt.GridBagConstraints.BOTH; gbc.weightx = 1.0; gbc.weighty = 1.0;
            frame.add(cartScroll, gbc);
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL; gbc.weightx = 0; gbc.weighty = 0;

            // Add to Cart Button
            JButton addToCartBtn = new JButton("Add to Cart");
            addToCartBtn.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));
            addToCartBtn.setBackground(new java.awt.Color(33, 150, 243));
            addToCartBtn.setForeground(java.awt.Color.WHITE);
            addToCartBtn.setFocusPainted(false);
            gbc.gridx = 0; gbc.gridy = 3; gbc.gridwidth = 2;
            frame.add(addToCartBtn, gbc);

            // Remove from Cart Button
            JButton removeFromCartBtn = new JButton("Remove Selected");
            removeFromCartBtn.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));
            removeFromCartBtn.setBackground(new java.awt.Color(244, 67, 54));
            removeFromCartBtn.setForeground(java.awt.Color.WHITE);
            removeFromCartBtn.setFocusPainted(false);
            gbc.gridx = 2; gbc.gridy = 3; gbc.gridwidth = 2;
            frame.add(removeFromCartBtn, gbc);

            // Complete Sale Button
            JButton saleBtn = new JButton("Complete Sale");
            saleBtn.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 15));
            saleBtn.setBackground(new java.awt.Color(76, 175, 80));
            saleBtn.setForeground(java.awt.Color.WHITE);
            saleBtn.setFocusPainted(false);
            saleBtn.setToolTipText("Complete the sale and update inventory.");
            gbc.gridx = 0; gbc.gridy = 4; gbc.gridwidth = 4;
            frame.add(saleBtn, gbc);

            // Add to Cart logic
            addToCartBtn.addActionListener(e -> {
                String selected = (String) productBox.getSelectedItem();
                String qtyText = qtyField.getText().trim();
                if (selected == null) {
                    UIHelper.showErrorDialog(frame, "No product selected.", "Input Error");
                    return;
                }
                    String productName = selected;
                    int idx = selected.indexOf(" (");
                    if (idx != -1) productName = selected.substring(0, idx);
                int quantity;
                try {
                    quantity = Integer.parseInt(qtyText);
                    if (quantity < 1) throw new NumberFormatException();
                } catch (NumberFormatException ex) {
                    UIHelper.showErrorDialog(frame, "Invalid quantity. Enter a positive integer.", "Input Error");
                    return;
                }
                // Check if already in cart
                for (int i = 0; i < cartModel.getRowCount(); i++) {
                    if (cartModel.getValueAt(i, 0).equals(productName)) {
                        int prevQty = Integer.parseInt(cartModel.getValueAt(i, 1).toString());
                        cartModel.setValueAt(prevQty + quantity, i, 1);
                        qtyField.setText("");
                        return;
                    }
                }
                cartModel.addRow(new Object[]{productName, quantity});
                qtyField.setText("");
            });

            // Remove from Cart logic
            removeFromCartBtn.addActionListener(e -> {
                int selectedRow = cartTable.getSelectedRow();
                if (selectedRow != -1) {
                    cartModel.removeRow(selectedRow);
                }
            });

            // Complete Sale logic: process all items in cart
            saleBtn.addActionListener(e -> {
                if (cartModel.getRowCount() == 0) {
                    UIHelper.showErrorDialog(frame, "Cart is empty.", "Input Error");
                    return;
                }
                String customerName = nameField.getText().trim();
                String customerNumber = numberField.getText().trim();
                String saleId = java.util.UUID.randomUUID().toString();
                double grandTotal = 0;
                try (Connection conn = DatabaseConnection.connect()) {
                    conn.setAutoCommit(false);
                    for (int i = 0; i < cartModel.getRowCount(); i++) {
                        String productName = cartModel.getValueAt(i, 0).toString();
                        int quantity = Integer.parseInt(cartModel.getValueAt(i, 1).toString());
                        // Get product price and quantity
                        String getProduct = "SELECT price, quantity FROM products WHERE name = ?";
                        PreparedStatement pstmt = conn.prepareStatement(getProduct);
                        pstmt.setString(1, productName);
                        ResultSet rs = pstmt.executeQuery();
                        if (!rs.next()) {
                            conn.rollback();
                            UIHelper.showErrorDialog(frame, "Product not found: " + productName, "Database Error");
                            return;
                        }
                        double price = rs.getDouble("price");
                        int availableQty = rs.getInt("quantity");
                        if (availableQty < quantity) {
                            conn.rollback();
                            UIHelper.showErrorDialog(frame, "Not enough quantity for " + productName + ". Available: " + availableQty, "Stock Error");
                            return;
                        }
                        double total = price * quantity;
                        grandTotal += total;
                        String date = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                        // Insert into sales table
                        String insertSale = "INSERT INTO sales (sale_id, product_name, quantity, total, date, customer_name, customer_number) VALUES (?, ?, ?, ?, ?, ?, ?)";
                        PreparedStatement insertStmt = conn.prepareStatement(insertSale);
                        insertStmt.setString(1, saleId);
                        insertStmt.setString(2, productName);
                        insertStmt.setInt(3, quantity);
                        insertStmt.setDouble(4, total);
                        insertStmt.setString(5, date);
                        insertStmt.setString(6, customerName);
                        insertStmt.setString(7, customerNumber);
                        insertStmt.executeUpdate();
                        // Deduct quantity from products
                        String updateQty = "UPDATE products SET quantity = quantity - ? WHERE name = ?";
                        PreparedStatement updStmt = conn.prepareStatement(updateQty);
                        updStmt.setInt(1, quantity);
                        updStmt.setString(2, productName);
                        updStmt.executeUpdate();
                    }
                    conn.commit();
                    UIHelper.showInfoDialog(frame, "✅ Sale completed! Grand Total: ₹" + grandTotal);
                    cartModel.setRowCount(0);
                    UIHelper.updateProductCombo(productBox);
                    nameField.setText("");
                    numberField.setText("");
                } catch (Exception ex) {
                    ex.printStackTrace();
                    UIHelper.showErrorDialog(frame, "❌ Error: " + ex.getMessage(), "Database Error");
                }
            });

            frame.setVisible(true);
        });
    }
    // Helper to update product combo box
    // updateProductBox now handled by UIHelper
}
